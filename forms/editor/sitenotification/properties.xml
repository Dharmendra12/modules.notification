<?xml version="1.0" encoding="UTF-8"?>
<panel>
	<section labeli18n="modules.notification.bo.general.General">
		<field name="subject" />
		<field name="body" />
		<field name="template" />
	</section>
	<section labeli18n="modules.notification.bo.general.Advanced">
		<field name="header" />
		<field name="footer" />
		<field name="senderEmail" />
		<field name="senderName" />
	</section>
	<fieldinput name="availableparameters" type="hidden"/>
	<xul>
		<javascript>
			<field name="mPreviewButton">null</field>
			
			<constructor><![CDATA[				
				this.mPreviewButton = this.addActionButton('${transui: m.notification.bo.actions.previewnotificationfromlist,ucf}', wToolkit.getIcon('preview', 'small'));
				var me = this;
				this.mPreviewButton.addEventListener('command', function(event) { me.onPreview(); }, true);			
				this.extendMethod('updateCommandsUI', this.updatePreviewUI);
				this.extendMethod('fireInitializeComplete', this.fireInitializeCompleteExtend);
			]]></constructor>
			
			<method name="updatePreviewUI">
				<parameter name="event" />
				<body><![CDATA[
					this.mPreviewButton.disabled = this.modified;
				]]></body>
			</method>

			<method name="onPreview">
				<parameter name="event" />
				<body><![CDATA[
					this.documentEditor.module.previewNotification(this.documentEditor.documentid, this.mLang);
				]]></body>
			</method>
			
			<method name="fireInitializeCompleteExtend">
				<parameter name="result" />
				<body><![CDATA[
					try
					{
						var fields = this.fields;
						var params = result.contents.availableparameters;
						this.setTextTemplate(fields.body, params);
						this.setTextTemplate(fields.header, params);
						this.setTextTemplate(fields.footer, params);	
					}
					catch (e)
					{
						wCore.error("notification.propertiespanel.fireInitializeCompleteExtend", [result], e);
					}
				]]></body>
			</method>
			
			<method name="setTextTemplate">
				<parameter name="field" />
				<parameter name="availableparameters" />
				<body><![CDATA[
					var toolbar = field.toolBar;				
					toolbar.clearTextTemplate();
					if (availableparameters)
					{
						var parameters = availableparameters.split(/\s|,/);
						for (var i = 0; i < parameters.length; i++)
						{
							var param = parameters[i];
							if (param.length > 0)
							{
								if (param[0] != '{') {param = '{' + param + '}';}
								toolbar.addTextTemplate(param, param);
							}
						}
					}
				]]></body>
			</method>					
		</javascript>
	</xul>
</panel>